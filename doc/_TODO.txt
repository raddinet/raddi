TODO
====

accept all data from core nodes (don't consider old)

(go through all reddit comments on raddi for ideas I've already forgot)

apparently sharing history stopped working after data reset

threads are inserted duplicated (race condition?)

peer addresses appear validated or are validated even though it's not possible to connect to them

hybrid (?) mode - bypass proxy for certain ports (80,443) or attempt connection both through proxy and directly

will not start connecting to core nodes if connecting to validated node on same IP (different port) as other core node

retired connections sometimes stick around instead of deleted (and service gets stuck on exit)

core/core sync does not always work, core node will not recognize other core node

fix continuous re-sharing no longer available node addresses

download request for nested entry will also return all entries above to form a chain

log passed seconds to detect time spans when the device was off, then issue download requests

32-bit version issues

libsodium: https://docs.microsoft.com/en-us/cpp/build/arm64-windows-abi-conventions

frustration module (MITM protection)
 - TODO: implement only after reaching certain traffic
 - wait up to X seconds for at least a few bytes of an entry before we send our (part)
    - etc.

after connection sync reports are incorrect
 - when reporting history, we probably add all from 0...X to first range of X+1...Y

revocation code for identity: when received, all further messages by that identity are dropped
 - content code, 0xF8 plus fixed predefine block of content??
 - node support (list of revoked IIDs)

commands: optimize
commands: list:peers...
raddi.com analyze/get/list -> support decompression
raddi.com sign/verify -> file or text using identity
raddi.com allow set offline database path for reading (not through 'instance')
raddi.com simulated sends (for testing), send into local file, not to instance sink

node operators message channel
 - ?
warrant cannary channel
 - https://en.wikipedia.org/wiki/Warrant_canary
 - example content: https://www.idrix.fr/VeraCrypt/canary.txt
general link comments channel
 - adding discussions below random internet links that might not allow one
 - unnamed topics with SHA1 of the link?
    - normal name as "title change" MOD OP
    - typically replies (automatically added) just contain EID of discussions in actual channels
       - MERGE mod OPs
    - or discussion simply follows (?)

outbound data sorting in raddi::connection::send
 - prioritize shorter entries
 - random delay for origin masking (longer for longer messages)

report bad inputs (from source) in node

extend log so it can also output binary to named section (one for every level) for multiple clients to read

support reading options from file
 - and registry
    - command line overrides all, specified file overrides registry
 - display where option came from
 - node running as service stores settings in HKLM
    - connected app will need elevation of the "node setup dialog" (separate app)
 - node started by tray app or reader app will normally use HKCU 
    - but if local config file (sqlite?) is present (raddi32.cfg) then will use that

gut out OpenSSL, libbitcoin or something and make absolutely minimal library to verify BTC-signed messages

tables: test and fix shard splitting
tables: add code for client app to process external changes, see 'process' member function
tables: evaluate proper size limits so the index files fit exactly within whole multiples of a typical cluster size

consider converting documentation into .md files

perfect compression dictionary for english text
 - https://sourceforge.net/p/lzmautils/discussion/708858/thread/e40fbf99/
 - 1) open reddit export and extract body string
   2) replace unicode (\u1234) and escapes (\n or \") with actual unicode/control characters
   3) split to words (keep apostrophed words like can't or can\u2019t)
   4) for 'en' dictitonary drop words with unicode characters in it except \u2019 (maybe other?)
   5) compute freqency of words -> value
   6) reduce: remove words found in other words (affect value: avg, sum or max?)
   7) clamp: delete low values words, keep only reasonable amount of high-value words
   Z) combine: to one long string, asc sorting by value, with removing words found inside the newly combined string
 - evaluate gains of shuffling various similarly-valued words in order to 
 - compress initial bodies with established dictionary, report results, try different dictionaries, compare results

historical data replay flooding protection in raddi::db::classify case
 - start rejecting old entries from connection that we did not asked (connection->history_extension)

app: master phrase/password to protect keys + misdirection phrase/password for plausible deniability unlocks different set of account
 - generates safety hash such as
    - pwd1 + hash -> main key
    - pwd2 + hash -> safety key

sane coordinator status display
more info into overview

move connection::request_limiter to separate class

raddi::db::peerset::select with random number is pretty inefficient for large sets, gather N peers in one go
 - later perhaps attempt some geographical optimization (4/8 close, 2/8 far, 1/8 very far, 1/8 core)

connection members will probably need locking to protect from early deletion when retired

old data deletion (whole shards?) except 'retained' channels/threads
 - compress old shards when all data except retained are deleted

Windows tray app (optional) to monitor Node service
 - andon?
 - raddinfo.exe?

coordinator: congestion control
coordinator: small random delay to sends to harden agains origin analysis -> connection.send
connection::send -> prioritization and delay support
coordinator: support for 'flags' 0x0001 (detail request) in channel/identites history and subscriptions history

merge raddi::detached, raddi::noticed and raddi::subscriptions
 - maybe one base template with 3 specializations

split raddi stuff from node.cpp to raddi_node.cpp
 - rename node.cpp to node_win.cpp and keep all Win32/service stuff there

shell32.dll - SHGetFolderPath (use install path as default for db/log???)
user32.dll - LoadStringW
ole32.dll - StringFromGUID2
 - rewrite those functions because those DLLs load GDI32.dll into raddi##.exe service
   (more secure, less resources)

ARM/ARM64 manifests don't need supportedOS older than (10 for ARM64, 8 for ARM)

rework System (GetProcAddress) so that builds for Windows 10 link statically

rewrite log as noted in log.cpp or somewhere there in comment
rewrite log to use {fmt}

SETTINGS GUIDE: settings for most privacy concerned users, first run (proxy, tor, listeners, xor-mask)
SETTINGS GUIDE: running multiple nodes on single machine

TBD hta: http://localhost:44304/abcd/ executable name??? local web serving tray app, access through http/browser
TBD app: https://msdn.microsoft.com/en-us/library/aa767914(VS.85).aspx#app_reg
TBD ext: raddi://a29e7568b5da6a-b5e418[.txt/.html/.xml/.md]
TBD ext: raddi://a29e7568b5da6a-b5e418/[1/2/3/...][.jpg/.png/.zip/...]
TBD www - read-only web interface: http://read.raddi.net:8008/... (or 591)

common/string.h
 - string with platform-defined internal representation
   (UTF-16 on Windows, UTF-8 on Linux), auto converting
 - use for paths and everything
    - options?
    - for comparisons use TEXT macro, define platform-specific for non-_WIN32
    - node.cpp/raddi.com.cpp -> main args?
 - AND THEN DROP ALL wchar_t* OVERLOADS

consider http server? simple GET/POST support
 - also replace Source/commands functionality
 - POST - new identity/channel/post/etc.
 - GET - db queries? lists of identities/channels
       - deep tree data fetch?
       - get node status (for status button/iframe on website)
 - perhaps simple HTML control panel

document protocol
 - requirement: synchronized time
