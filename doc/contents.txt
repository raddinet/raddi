Entry contents
==============										|

This specification is work in progress and subject to significant changes and extensions.

Technically, any binary data, up to maximum bytes, can follow properly constructed entry
header. This is further restricted by consensus and/or predefining binary blob at fixed
offset. The content is primarily considered to be unicode text encoded in UTF-8, no BOMs,
except where introduced by non-UTF-8 bytes; see decompression and extraction phase
description below. Certain code points also have specific meaning. Incorrectly formatted
content can be refused by a node.

The maximum size of content data, 65430, is calculated as:
	= 65534: 2B protocol frame size bytes, where FFFF value is reserved for
	  keep-alive reply, thus leaving FFFE as maximum frame size
	- 16 bytes encryption (AES256-GCM or XChaCha20-Poly1305) authentication tag bytes
	- 12 bytes entry identifier (also identifies the author)
	- 12 bytes parent entry identifier
	- 64 bytes of Ed25519ph signature

Note that there is mandatory variable-sized Cuckoo Cycle proof-of-work appended to each
entry. This ranges from 50 bytes (proof length 12) to 170 bytes (proof length 42).

The size is further restricted (including the size of proof-of-work) to:
	- 223 bytes for a new identity announcements
		- 32 bytes (first) carry identity public key that's used to verify user's
		  signatures
		- 50 ~ 170 bytes for proof-of-work
		- 53 bytes used for identity name, restricted by consensus
			- decompression/extraction and formatting is not allowed in name
	- 255 bytes for a new channel announcement, restricted by consensus
		- 50 ~ 170 bytes for proof-of-work
		- 83 bytes used for channel name
			- decompression/extraction and formatting is not allowed in name

Reasons for restricting above by consensus:
	- saving 4B of database storage per identity/channel; see raddi_database_row.h
	- keeping titles reasonable

Decompression phase:
--------------------
After successfully decompressing at least one of the following, the decompression phase
runs again, e.g. to decompress LZMA-compressed content encrypted in private message, etc.

Each of the following bytes is followed by 2B (LE) size information that must not exceed
the remaining size of the entry content. Segments unknown to the implementation should be
ignored.

Leading byte:
	0xF8: reserved
	0xF9: reserved
	0xFA: BINARY ATTACHMENT
		- type is determined by magic header bytes, and typical behavior is:
			- images are displayed aside the text
			- archives display paperclip icon(s) to allow extraction and save
			- audio displays play icon button or full seekable player bar
	0xFB: reserved
	0xFC: COMPRESSED DATA, LZMA, optionally with predefined dictionary
		- after length informations, 2B code for predefined dictionary follows:
			- 00 00 - no dictionary
			- 65 6E - default english dictionary
			- adding more dictionaries should be coordinated
		- compressed data follows, typically just UTF-8 text, but may again
		  contain any of here defined leading bytes
	0xFD: DIFFERENTIAL DATA, EDIT
		- length of less than 4 bytes is not allowed and should be ignored
		- after length informations, 2×2B integers follow:
			- offset into uncompressed/decrypted parent entry
			- length of the content in uncompressed/decrypted parent entry
			  that is to be replaced by following content
		- when user replies to his own entry then the entry may contain multiple 
		  EDITs which may not overlap and client application should merge them
		- when entry posted by a different user contains EDITs, the application
		  should render them appropriately
	0xFE: ENCRYPTED DATA
		- content is encrypted by pre-shared per-channel key
		- TBD: crypto_stream/crypto_stream_xor - nonce is eid+parent
	0xFF: PRIVATE MESSAGE/REPLY
		- content is encrypted by target user's public key
		- TBD: crypto_sign_ed25519_pk_to_curve25519/crypto_box_easy

TBD: one of the reserved bytes above will be used to signify packet of streamed data

Extraction phase:
-----------------
Following code points are removed from displayed content but their meaning is interpreted
and applied according to user's client app settings.

Several code points are followed by additional data of variable length. Their format is
described below. If code point has no following data, NO DATA FOLLOW is specified in the
table. Additional data types are: TOKEN and STAMP. 

Leading bytes:
	0x00: NUL, PROOF OF WORK
		- first NUL byte that does not belong to compressed chunk (above) or does
		  not terminate string STAMP in this table, terminates the entry and
		  introduces PoW; generally the entry is parsed backwards for the proof
		- NO DATA FOLLOW
	0x04: EOT
		- meaning reserved
		- NO DATA FOLLOW
	0x05: ENQ
		- meaning reserved
		- NO DATA FOLLOW
	0x06: ACK
		- indicator for private messages, or otherwise targetted messages, author
		  reports that he has read the parent entry
		- NO DATA FOLLOW
	0x07: BEL, REPORT
		- user reports parent entry to moderators for evaluation
		- no further content required, GUI clients should graphically distinguish
		  the parent entry as reported for evaluation by moderators
		- NO DATA FOLLOW
	0x08: BS, REVERT
		- nullifies operations (mod ops, votes, edits, ...) in parent entry
			- only authors can revert their votes and edits; reverted text
			  content can be rendered with some "user changed his mind" icons
			- how moderators can revert each other's ops depends on their
			  standing in user's subscriptions (client-specific... TBD)
		- multiple occurances are ignored, other content... (TBD)
		- NO DATA FOLLOW
	0x0B: VT, VOTE
		- client app is free to ignore votes embedded in compressed or encrypted
		  data (not that it isn't free to ignore them altogether, just saying)
		- TOKEN
		- predefined vote codes:
			- 0x01: UP (generic agreement)
			- 0x02: DOWN (generic disagreement)
			- 0x03: INFO (considered informative, but user disagrees)
			- 0x04: FUNNY (user agrees, but it's joke, not informative)
			- 0x05: SPAM (does not add any value)
		- predefined vote strings:
			- none, reserved for future extensions
	0x0C: FF
		- meaning reserved
		- NO DATA FOLLOW
	0x10: DLE, SIDEBAND DATA SET/EDIT
		- valid only if first byte in entry and if appears only once
		- valid only if direct descendant of the announcement of the identity or
		  channel it affects (the 'thread' level)
			- client app should apply change to identity name (or any other
			  identity sideband data) only when made by it's author
			- client app should apply changes to channel title or sidebar (or
			  any other sideband data), or thread title, only when made by a
			  moderator which the user is subscribed to
		- entries at the 'thread' level are limited in size by consensus, thus
		  to assign substantial data with the channel, the user should post small
		  entry with only sideband token, and content as descending entries
		- TOKEN
		- predefined sideband ID codes:
			- 0x01: title
				- direct change to identity/channel/thread name/title
			- 0x02: header - reserved, unused
			- 0x03: footer - reserved, unused
			- 0x04: sidebar - set/change identity/channel sidebar text
			- 0x05: shoutbox - twitter-like feed
			- 0x1F: TBD: meta channel, textual meta information, examples:
				- channel mode suggestion, initial moderators suggestion
					- modes: only author, only approved people, ...
				- TODO: channel favicon?
				- TODO: channel topics (list of keywords)
				- user shares his donation cryptocurrency addresses
				- moderators specify parameters for autoban filter(s)
				- will also be used after byte codes like SYN/EM run out
				- how fast to delete data from the channel
		- predefined sideband ID strings:
			- none
		- TODO: again, consider turning to STAMP
	0x15: NAK
		- moderation; a moderator advises subscribed clients to perform an action
		- STAMP
		- defined type codes:
			- 0x01 - NSFW
			- 0x02 - NSFL
			- 0x03 - SPOILER
			- 0x08 - STICK
			- 0x09 - HIGHLIGHT
			- 0x10 - BAN
				- moderator bans the user for the parent entry
				- 2 bytes following contain number of days with 0 = 1 day
				- clients subscribing to the moderator should hide all
				  entries posted by the identity within the timeframe
			- 0x30 - ENDORSE
				- moderator or author endorses particular moderator (iid)
				- parent entry is the channel this applies to
				- 8 bytes following contain IID of the endorsed
			- 0x31 - DISAVOW
				- moderator or author disavows particular moderator (iid)
				- parent entry is the channel this applies to
				- 8 bytes following contain IID of the disavowed
			- 0x40 - MOVE
				- the parent entry should be moved under 'eid'
				- 'eid' is contained in the 12 bytes that follow
			- 0x41 - JUNCTION
				- this NAK entry should be replaced by 'eid' and
				  everything that follows that 'eid'
				- 'eid' is contained in the 12 bytes that follow
				- clients should allow junctions forming cross-posted
				  topics from anyone, and within comment tree accessible
				  on demand from anyone
	0x16: SYN, CHAINING
		- followed by hash type code and the hash (or other form) of parent entry
		  to ensure valid chain of responses
		- STAMP
		- defined type codes:
			- 0x10 - CRC-16 CCITT
			- 0x20 - CRC-32
			- 0x30 - CRC-64
			- 0x51, 0x61 and 0x71 - BLAKE2b
			- 0x32 - SipHash24
			- 0x52 - SipHashx24
			- 0x63 - SHA-256
			- 0x73 - SHA-512
		- TODO: define default, probably SHA-256
	0x17: ETB
		- meaning reserved
		- STAMP
	0x19: EM, ENDORSEMENT
		- user signals endorsement of parent entry or specific IID/EID/etc
		- multiple endorsement can appear per entry
		- STAMP
		- code byte is not required when EM byte is last; code 0x00 is assumed
		- code 0x00 references parent entry and has multiple meanings:
			- moderator forwards other mod's operation to his own subscribers
			- moderator forwards other mod's sideband update
		- other defined codes:
			- 0x30 - moderator/channel author endorses other moderator (IID)
			- 0x40 - moderator/channel author endorses EID
	0x1A: SUB
		- meaning reserved
		- TOKEN
	0x7F: DEL, DELETE
		- moderator or author wishes to delete (hide) the parent entry
		- NO DATA FOLLOW

Optional following variable-length data formats:
	TOKEN: initial code point is followed by either:
		- 1B code in predefined range 0x01..0x1F
		- a NUL-terminated UTF-8 string
	STAMP: initial code point is followed by 1 byte that specifies type and amount of
	       data that follows in format RNNNTTTT where:
		- R - reserved bit, most significant bit (0x80)
		- NNN - number of following bytes (unsupporting client can skip):
			- 0 - 0 bytes
			- 1 - 2 byte
			- 2 - 4 bytes
			- 3 - 8 bytes
			- 4 - 12 bytes
			- 5 - 16 bytes
			- 6 - 32 bytes
			- 7 - 64 bytes
		- TTTT - type of data


Other code points with specific meaning:
----------------------------------------
Generally define visual representation of text.

Code points:
	0x0001: SOH, heading, render until STX
	0x0002: STX, text, cancels heading started with SOH
	0x0003: ETX, end of text, render "More..." button here and hide rest
	0x0009: HT, TAB, standard meaning, column alignment
	0x????: ???, spoiler, hidden by client app until intentionaly revealed
	0x000A: LF, line feed, new paragraph
		- client may render as 3/4 line height space, indent first row, etc.
	0x000D: CR, carriage return, newline
		- client should not render any extra space or anything, just start at new
		  line

Text formatting:
	0x000E: SO, lower text intensity
	0x000F: SI, higher text intensity
	0x0011: DC1, different font, serifs
	0x0012: DC2, different font, monospace
	0x0013: DC3, different font, handwriting
	0x0014: DC4, different font, reserved
	0x0018: CAN, cancels all formatting set up until that point
	0x001B: ESC
		- TODO: font size (relative?)
		- TODO: bold, italic, underline, stikeout
		- TODO: color? semantic colors?
	0x001C: FS, reserved for tables
	0x001D: GS, reserved for tables
	0x001E: RS, reserved for tables
	0x001F: US, reserved for tables

TODO: stream starts
TODO: ENQ? users pinging OP for update?
