Command-line parameters
=======================

Notes:
	- parameters considered a primary command, especially to raddi.com, must be first
	  on the command line, otherwise they may be considered to be optional argument
	- parameters may be optionally introduced by '/' or any number of '-' characters,
	  neither is necessary though
	- parameters that take boolean value, usually denoted with <0|1|false|true> below
	  are generally false by default, unless specified otherwise; when specified
	  without value, true is assumed

Common parameters:
	- log:<default|all|everything|event(s)|data|error(s)|stop(s)|disable(d)>[:<path>]
		- selects events written into the log file
		- level - one of predefined strings:
			- "default" - uses default log level, currently "error"
			- "disable" or "disabled" - logs nothing
			- "all" or "everything" - all events, even frequent status notes
			- "event" or "events" - significant runtime events and all below
			- "data" - malformed/invalid data processed and all below
			- "error" or "errors" - recoverable runtime errors and below
			- "stop" or "stops" - logs irrecoverable errors
		- path is optional path to log, if not specified the file's name is built
		  from application's file name, replacing its extension (typically .exe)
		  with .log
		- the log file is attempt to open/create in following directories:
			1) current directory
				- only when 'path' parameter is present and does not
				  specify full path
			2) user local app data path (not roaming)
			3) application directory
	- display:<default|all|everything|event(s)|data|error(s)|stop(s)|disable(d)>
		- selects events displayed to console when started as application
		- parameter is same as log level
			- default display level is "events"
	- protocol:<text>
		- sets 8 bytes long protocol magic string that prevents connects between
		  incompatible versions; can be used to establish whole separate network
		- text parameter is converted to UTF-8 and truncated or NUL-padded to 8
		  bytes
			- default is: RADDI/1

Node parameters:
	- name:<name>
		- overrides default service name "raddi" when run as Windows service
		- use on executable path (command-line) when installing the service
	- threads:<n>
		- number of worker threads the node service should use
		- when 0 (default) a 3 threads are started for each 2 logical processors
		  capping on 1/8 way from 'connections' to 'max-connections'
	- listen:<IP:port>
	- listen:<port>
	- listen:off
		- request to listen on IP address and port, IPv4 and IPv6 are allowed
		- for port only, two (IPv4 and IPv6) listeners are started
		- if not specified, listeners are started on default port 44303
		   - unless 'listen:off' (or invalid listen parameter) is provided
	- discovery:<IP:port>
	- discovery:<port>
	- discovery:off
		- starts local peer discovery on IP address and port, similar to 'listen'
		- for port only, two (IPv4 and IPv6) discoverers are started
		- if not specified, local peer discovery is started on default port 44303
		   - unless 'discovery:off' (or invalid discovery parameter) is provided
	- source:<path>
		- directory for files with entries for transmission
	- database:<name|path>
		- the path may be relative to default storage (name) or absolute (path)
		- default name is "database"
	- bootstrap:<URL>
	- bootstrap:<DNS URI>
	- bootstrap:off
		- on start, uses either DNS query or file download to retrieve peer IP
		  addresses, and adds those to database as core-level peer nodes
		- more than one URL/URI can be provided by repeating the parameter
		- URL
			- standard http/https URL, credentials are supported
			- e.g.: https://www.raddi.net/bootstrap.txt
			- the file must be plain text ASCII file containing
			  single IP:port pair on each row
		- DNS URI
			- dns:[//authority/]domain[:port][?type=<A|AAAA>]
			- 'authority' part is ignored unless 'domain' is omitted
				- if 'domain' is missing, the 'authority' is assumed to
				  be the intended domain mistakenly prefixed by slashes
			- 'port' part is non-standard extension to RFC 4501
				- used to connect to the retrieved IP address
				- default port (if not specified) is 44303
			- 'type' determines what DNS record to retrieve
				- only first is used; other, semi-colon separated,
				  parameters (such as "class" are ignored)
				- supported types are:
					- A - IPv4
					- AAAA - IPv6
		- "off"
			- use "off" to disable default query when core-level
			  nodes list is empty
		- if no "bootstrap" parameter is provided, and if the local core-level
		  peer node list is empty, the node will query these DNS' for peers:
			- dns:44303.raddi.net:44303?type=AAAA
			- dns:44303.raddi.net:44303?type=A
			- dns:443.raddi.net:443?type=AAAA
			- dns:443.raddi.net:443?type=A
	- bootstrap-proxy:<name>
		- if present, bootstrap URL is accessed through proxy
		- if name is omitted, the default system-configured proxy is used
	- bootstrap-user-agent:<user-agent-string>
		- replaces user-agent string used when accessing bootstrap URLs
		- default user agent string is "RADDI/1.0" where 1.0 represents current
		  version of the software
	- proxy:<port|IP:port>
		- specifies SOCKS5t (Tor) proxy; support for optimistic data is REQUIRED
		- default SOCKS5t proxy IP address is 127.0.0.1:9050
		- notes:
			- local network addresses are not routed through proxy
			- Tor Browser opens port 9150 instead of 9050 (expert bundle)
		- for maximum anonymity consider using along with following options:
			- "bootstrap:off" or "bootstrap-proxy:..."
			- "discovery:off" to prevent local network connections
			- "listen:off" so the node doesn't advertise listening port
		- no proxy is used by default, if the parameter is omitted
	- aes:<auto(matic)|disable(d)|force(d)|(force-)gcm|(force-)aegis>
		- adjusts how node selects between AEGIS-256, AES256-GCM and the default
		  XChaCha20-Poly1305
		- value: one of predefined strings:
			- "auto" - uses either AEGIS-256 (preferred) or AES256-GCM
			  whichever is supported by both parties, XChaCha20-Poly1305
			  otherwise
			- "disabled" - always uses XChaCha20-Poly1305
			- "forced" - disconnects peers that won't support some AES
			- "aegis" - disconnects peers that won't support AEGIS-256
			- "gcm" - disconnects peers that won't support AES256-GCM
		- forcing scheme that is not supported in hardware will result in error
		  message and reverting to XChaCha20-Poly1305
	- local:<0|1|false|true>
		- limits outbound connections to local peers only (locally discovered)
		- default is false
	- network-propagation-participation:<0|1|false|true>
		- selects if node participates in network propagation, i.e. subscribes to
		  receive all traffic and store/rebroadcast it where appropriate in order
 		  to ensure the network health
		- generally users with data plan should disable this feature to conserve
		  bandwidth, preferably by using the 'leaf' option
		- default is true
	- channels-synchronization-participation:<0|1|false|true>
		- determines whether the node responds to identity/channels history query
		  with data batch that it has determined the peer has incomplete; this is
		  often substantial amount of data
		- generally users with data plan should disable this feature to conserve
		  bandwidth, preferably by using the 'leaf' option
		- default is true
	- full-database-downloads:<0|1|false|true>
		- allows peers to query and download all data, regardless of channels,
		  currently in local database
		- generally used by core nodes to fully synchronize among themselves, not
		  to be used by privacy concerned users as it can reveal subscriptions
		  and accounts connected to a particular IP address
		- default is false
	- full-database-download-limit:<#>
		- responses to full database download requests will never return data
		  older than this limit, regardless of request's threshold
		- default is 62 days (62 * 86400 seconds)
	- proof-complexity-requirements-adjustment:<#>
		- adjusts (increases or decreases) minimal required PoW complexity for
		  both identity/channels (default 27) and other entries (default 26)
		- prepared for use in future where mainstream PCs could spam the network
		- default is 0
	- keep-alive:<N>
		- specifies how long after last received data are peer connections probed
		  to ensure connected status
		- default value is 60000, i.e. 60 seconds; zero disables keep-alives
		- NOTE: non-zero values smaller than 1000 may not work
	- track-all-channels:<0|1|false|true>
		- node will store all top level channel entries (threads and meta)
		  to database so that GUI apps can present meaningful info to the user
		- default is true
	- core
		- affected options:
			- database-store-everything = 1
			- full-database-downloads = 1
	- leaf
		- affected options:
			- max-core-connections += 1
			- min-core-connections += 1
			- network-propagation-participation = false
			- channels-synchronization-participation = false
			- track-all-channels = false

Node database behavior parameters:
	- database-reinsertion-validation:<0|1|false|true>
		- when non-zero, repeatedly received entries are validated against data
		  already in database
		- default is 0 for release builds, 1 for debug builds
	- database-backtrack-granularity:<seconds>
		- specifies relative difference of a newly created shard's base timestamp
		  when database receives entry older than oldest entry already present
		- default is 4×86400 i.e. four days
	- database-store-everything:<0|1|false|true>
		- when non-zero the database is not testing for subscriptions and stores
		  everything (core network nodes are typically configured as such)
		- default is 0 when parameter is missing, 1 if no value is provided
	- database-xor-mask-size:<N>
		- used on first start, defines size of random xor mask used subsequently
		  to xor database content files on read and write
			- the purpose is to mask data against simple full-disk searches
			  for anything discrediting, regardless the author of such data
		- default is 256, set to 0 to keep database unencrypted

RADDI.exe application optional parameters:
	- data:<filename>
		- application's data SQLite file name/path
			- the directory must be writable
			- applications are locking over this file; if there already is
			  one running on the data file, newly started executable passes
			  relevant arguments to that instance (if possible) and exits
		- filename, if not absolute path, is relative to current directory
		- without this parameter the data file's name is constructed by taking
		  application's file name, replacing its extension (typically .exe) with
		  .db, then searched for in following order in following directories:
			1) current directory
			2) application directory
			3) user app data path (roaming)
				- file is finally created here if not found anywhere else
				  and usually split into several parts for resiliency
	- raddi:<iid/eid>
		- requests application to open one or more tabs with specified content
		- designed to work as URI handler, i.e. "raddi.exe raddi://1234-5678..."

RADDI.com utility functions/commands:
	- now
	- timestamp
	- timestamp:<N>
		- 'timestamp' displays current timestamp as hexadecimal lowecase number
		- 'now' is alias for 'timestamp' without parameter
		- N
			- optional
			- hexadecimal timestamp to decode, e.g.:
			  'timestamp:8de600' shows '2018-04-18 15:10:56'
		- NOTE: all times and timestamps are in UTC
	- microtimestamp
	- microtimestamp:<N>
		- displays current (us) timestamp as 16 hexadecimal lowecase characters
		- N
			- optional
			- hexadecimal timestamp to decode, e.g.:
			  'microtimestamp:87544f12f84' shows '2018-04-18 15:16:00.852868'
	- benchmark
		- proof-of-work (cuckoo cycle) benchmark
		- attempts to generate proof-of-work of all supported complexities on
		  predefined input, verifies that the results are as expected and reports
		  time it took to generate them
	- deepscan
		- performs revalidation of the entire database; enumerates all entries
		  and validates their correctness and verifies their proof-of-work and
		  signatures
		- debugging feature, may disappear in the future
	- install
	- install:<name>
	- uninstall
	- uninstall:<name>
		- installs or uninstalls node software executable as Windows service
		  (raddi64.exe or raddi32.exe in the same directory as raddi.com)
		- name
			- service name, default is "raddi"
		- optional parameters:
			- path - override service executable path (command line)
	- set-log-level:<level>
	- set-display-level:<level>
		- requests the instance to change current log/display level
		- see 'log' parameter above for list of supported levels
	- new:identity
		- creates new identity announcement with specified content (text/content)
		  and transmits it through active instance (specified, or first found)
		- NOTE: requires higher complexity PoW that may take more time to compute
		- prints identity identifier (hexadecimal format) followed by colon (:)
		  and private key (64 lowercase hexadecimal characters)
	- new:channel
		- creates new channel announcement with specified content (text/content)
		  and transmits it through active instance (specified, or first found)
		- NOTE: requires higher complexity PoW that may take more time to compute
		- required parameters:
			- identity
		- prints single line:
			- entry identifier of the channel, in lowercase hexadecimals
	- new:thread
		- creates new top-level thread entry with specified content(text/content)
		  and transmits it through active instance (specified, or first found)
		- "new:thread channel:<eid>" is actually just an alias for "reply:<eid>"
		   - channel parameter is not verified to actually describe a channel
		- required parameters:
			- identity, channel
		- prints single line:
			- entry identifier of the thread, in lowercase hexadecimals
	- reply:<eid>
		- creates new response entry to the <eid> entry and transmits it through
		  active instance (specified, or first found)
		- NOTE: due to rate limit imposed by the EID format, the command may fail
		        if called in rapid succession; one second delay is sufficient to
		        wait before retrying
		- required parameters:
			- identity
			- text or content in case of reply response
		- prints single line:
			- new entry identifier (eid), in lowercase hexadecimals
	- get:<eid>
		- retrieves an entry from the database and passes it's content to analyze
		  function, see below
		- optional parameters:
			- compact - false/true (default) - display in compact form
	- analyze:<*×N>
	- analyze:<hexadecimal>
	- analyze:<@path[@offset[:length]]>
		- analyzes binary content as if it was content of an entry, and displays
		  logical content it would carry, i.e. text, attachments, edits, votes,
		  moderation operations and others
		- hexadecimal
			- string of two-character hexadecimal values optionally separated
			  by any non-hexadecimal character; translated to string of bytes
			  with specified values
		- *×N
			- variable number (N) of star (*) characters, i.e.: analyze:***
			- requests string of two-character hexadecimal values optionally
			  separated by any non-hexadecimal character from command line
			- input terminates after N consecutive LF characters, trailing
			  LF characters are not included in the content
		- @path[@offset[:length]]
			- single (@) character followed by path to a file to be analyzed
			- optionally can also include offset and length if only a portion
			  the file is to be used; if length is not specified, until the
			  end of the file is assumed
			- size of input data is limited to 65430 bytes
		- optional parameters:
			- compact - false/true (default) - display in compact form
	- erase:<eid>
		- deletes the <eid> entry from database
		- optional parameters:
			- quick - don't do thorough erase of content, just index entry
	- download:<eid|"all">
		- requests, from all connected nodes, all data for the specified channel
		  or thread, or totally all data
		- eid - channel, thread or nested entry (then whole thread is downloaded)
			- if "all" is specified, requests to download all data the peers
			  have; note that non-core node peers will usually deny this
		- optional parameters:
			- threshold - default threshold is 31 days (now-31*86400)
	- list:<eid>
		- enumerates and displays entries directly descending the 'eid' entry
		- optional parameters:
			- names - false/true (default) - whether to display content
			- compact - false/true (default) - display compact content
			- author - if present, list only entries by that identity
			- oldest - hexadecimal timestamp of oldest entry to list
			- latest - hexadecimal timestamp of newest entry to list
	- list:identities
		- enumerates and displays all identities in the database (that equals to
		  all existing, active or past, identities in the network, when database
		  is fully synchronized), optionally restricted by timestamp of their
		  creation
		- optional parameters:
			- names - false/true (default) - whether to display identity name
			- oldest - hexadecimal timestamp of oldest identity to list
			- latest - hexadecimal timestamp of newest identity to list
	- list:channels
		- enumerates and displays all channels in the database (that equals to
		  all existing, active or past, channels in the network, when database is
		  fully synchronized), optionally restricted by timestamp of their
		  creation
		- optional parameters:
			- names - false/true (default) - whether to display channel names
			- author - if present, list only channels by that identity
			- oldest - hexadecimal timestamp of oldest channel to list
			- latest - hexadecimal timestamp of newest channel to list
	- list:threads
		- enumerates and displays all threads from a particular channel that are
		  currently present in the local database
		- required parameters:
			- channel - eid of a channel to list
		- optional parameters:
			- names - false/true (default) - whether to display thread names
			- author - if present, list only threads by that identity
			- oldest - hexadecimal timestamp of oldest thread to list
			- latest - hexadecimal timestamp of newest thread to list
	- list:instances
		- enumerates running instances of raddi daemon on the local system
		- typically only single running instance is found, but multiple can run
		  simultaneously under single or across multiple sessions
		- currently the format is: "PID (SID): status; priority"
			- PID - process ID of the daemon/node
			- SID - OS session ID (0 - services), 
			- status - text: "broadcasting", "disconnected" or "crashed"
			- priority - number (0..255), lower value = higher priority
	- add:<IP>
	- remove:<IP>
	- ban:<IP>
	- unban:<IP>
	- connect:<IP>

	- subscribe:<eid>
	- unsubscribe:<eid>
	- blacklist:<eid>
	- unblacklist:<eid>
	- retain:<eid>
	- unretain:<eid>

RADDI.com utility additional and optional parameters to functions:
	- instance:<pid>
		- specifies active instance, identified by PID number, to operate on
		- otherwise first instance found is used, searched in following order:
			1) raddi node running under same user account
			2) raddi node service
			3) raddi node running under other user account
		- applies to every function, except:
			- timestamp, microtimestamp, benchmark
	- text:<text>
		- <text> is converted to UTF-8 and appended to content of the new entry
		  without adding any additional characters
		- applies to:
			- new:identity, new:channel, new:thread, reply
	- content:<*×N>
	- content:<hexadecimal>
	- content:<@path[@offset[:length]]>
		- content is retrieved and translated per specification and appended to
		  content of the new entry, applicable specifications follow:
		- hexadecimal
			- string of two-character hexadecimal values optionally separated
			  by any non-hexadecimal character; translated to string of bytes
			  with specified values
		- *×N
			- variable number (N) of star (*) characters, i.e.: content:***
			- requests user input from command line
			- input terminates after N consecutive LF characters, trailing
			  LF characters are not included in the content
		- @path[@offset[:length]]
			- single (@) character followed by path to a file that is append
			  whole as-is to current content
			- optionally can also include offset and length if only a portion
			  the file is to be used; if length is not specified, until the
			  end of the file is assumed
		- applies to:
			- new:identity, new:channel, new:thread, reply
	- complexity:L,T,...
		- overrides CC PoW complexity requirements
		- parameter consists of series of decimal numbers separated by non-digits
		  where values in range 18...32 override the complexity level and higher
		  values override minimal time needed to compute the PoW in milliseconds
		- NOTES:
			- failure to meet minimal complexity requirements will result in
			  other nodes rejecting the entries
			- as the complexity level requirements are expected to increase
			  in the future, the minimal time value ensure that appropriately
			  increased level is applied even when older software is used or
			  the developers are lazy to re-tune the levels
		- applies to:
			- new:identity, new:channel, new:thread, reply
	- identity:*
	- identity:<iid>:*
	- identity:<iid>:<key>
	- identity:<iid>:@path[@offset[:length]]
		- provides the identity identifier of the entry author and key to sign
		  the entry with to verify authenticity
		- parts of the parameter are similar to 'content' parameter, see above
			- use star (*) character to request either the identity
			  description string, or just the key, from the command-line
			- use at (@) character to read identity key from a file
		- the utility verifies that the identity already exists in the database
		  and that the key is actually correct before continuing because wrongly
		  signed entry would only be rejected by other nodes
		- easiest use is to just provide output of the 'new:identity' command
		- applies to:
			- new:channel, new:thread, new:thread, reply
	- verify-identity-private-key:<0|1|false|true>
		- performs additional validation of the key before creating new entry
		- optional, attempt to use invalid key might get caught by sign/verify
		- applies to:
			- new:channel, new:thread, new:thread, reply
	- author:<eid>
		- specifies identity identitifer,
		  optional listing filter for list:channels command
		- applies to:
			- list:channels, list:threads
	- channel:<eid>
		- specifies channel identitifer, required parent for new:thread command,
		  listing filter for list:threads command
		- applies to:
			- new:thread, list:threads
	- quick:<0|1|false|true>
		- setting to true for 'erase' function, the deletion will not be thorough
		  i.e. only index entry is deleted; normally the content is overwritten
		  with zero bytes to purge the content completely
		- applies to:
			- erase
	- threshold:<timestamp>
		- timestamp of oldest data requested
		- the threshold is purely advisory, peers will generally return older
		  data if it is necessary to return whole thread, or reduce the threshold
		  if there's too much data
		- applies to:
			- download
	- names:<0|1|false|true>
		- specifies whether the content of the enumerated entries is parsed for
		  simple name, which is then displayed
		- setting to 'false' will significantly speed up the enumeration
		- generally defaults to 'true'
		- applies to:
			list:identities, list:channels, list:threads, list
	- timestamp:<N>
		- allows to override current time when creating certain types of entries
		- for debugging purposes only; do not override in regular usage as nodes
		  could delay and can completely refuse to accept unsynchronized entries
		- N - hexadecimal timestamp value to overr
		- NOTE: all times and timestamps are in UTC
		- applies to:
			new:identity, new:channel, new:thread, reply
	- oldest:<hexadecimal>
	- latest:<hexadecimal>
		- used to set limiting timestamps (upper and lower) for enumerations
		- when omitted, no listing restriction takes place
		- applies to:
			list:identities, list:channels, list:threads
